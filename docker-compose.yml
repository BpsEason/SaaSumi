version: '3.8'

# This file orchestrates the entire Monorepo architecture using Docker Compose.
# It sets up the Laravel backend, FastAPI AI service, MySQL database, Redis,
# Redis Commander, and Nginx reverse proxy.

services:
  # --- 1. Laravel Backend Service ---
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_app
    restart: unless-stopped
    ports:
      # Expose Laravel's HTTP port for local access and debugging
      # This port will be used by Nginx to proxy tenant domains (e.g., tokyo-inn.localhost:8000)
      - "8000:80"
    volumes:
      - ./backend:/var/www/html
      - ./nginx/backend.conf:/etc/apache2/sites-available/000-default.conf:ro
    depends_on:
      - mysql
      - redis
      - fastapi-recommend
    environment:
      # These variables are used by Laravel to connect to other services
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - FASTAPI_RECOMMEND_URL=http://fastapi-recommend:8001
      - APP_DEBUG=true
    networks:
      - monorepo-network

  # --- 2. FastAPI Recommendation Service ---
  fastapi-recommend:
    build:
      context: ./fastapi-recommend
      dockerfile: Dockerfile
    container_name: fastapi_recommend
    restart: unless-stopped
    ports:
      # Expose FastAPI's port
      - "8001:8001"
    volumes:
      - ./fastapi-recommend:/app
      # Cache Sentence Transformer models to avoid redownloading
      - model_cache:/root/.cache/torch/sentence_transformers
    networks:
      - monorepo-network

  # --- 3. Nginx Reverse Proxy (Frontend & API Gateway) ---
  nginx:
    image: nginx:latest
    container_name: monorepo_nginx
    restart: unless-stopped
    ports:
      # Expose the frontend port (for http://localhost:8080)
      - "8080:80"
      # Expose Laravel's port (for tenant domains like http://tokyo-inn.localhost:8000)
      - "8000:8000" # Maps container port 8000 (Laravel, proxied by Nginx) to host port 8000
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - fastapi-recommend
    networks:
      - monorepo-network

  # --- 4. MySQL Database ---
  mysql:
    image: mysql:8.0
    container_name: mysql_db
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      # Set MySQL root password and a database for the central app
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: saas_central
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - monorepo-network

  # --- 5. Redis Cache & Queue ---
  redis:
    image: redis:alpine
    container_name: redis_cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - monorepo-network

  # --- 6. Redis Commander (GUI for Redis) ---
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=redis_cache
      - HTTP_USER=admin
      - HTTP_PASSWORD=password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - monorepo-network

  # --- 7. Laravel Queue Worker (Optional) ---
  queue-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel_queue_worker
    restart: always
    volumes:
      - ./backend:/var/www/html
    depends_on:
      - redis
      - backend
    entrypoint: sh -c "php artisan queue:work --verbose --tries=3 --timeout=90"
    networks:
      - monorepo-network

# --- 8. OpenSearch (Optional, for logging/monitoring) ---
  opensearch:
    image: opensearchproject/opensearch:2.13.0
    container_name: opensearch_node
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS="-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=adminpassword
      - OPENSEARCH_INITIAL_ADMIN_USERNAME=admin
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200" # REST API
      - "9600:9600" # Transport
    networks:
      - monorepo-network

# --- Volumes for data persistence ---
volumes:
  mysql_data:
  redis_data:
  model_cache:

# --- Network for inter-container communication ---
networks:
  monorepo-network:
    driver: bridge
